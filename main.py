from blockchains.source_chain import SourceChain
from blockchains.destination_chain import DestinationChain
from relay_chain.relay_chain import RelayChain
from relay_chain.validator import ValidatorNode
from sc_to_rc import SCtoRCProver
from rc_to_dc import RCtoDCProver

# Kh·ªüi t·∫°o c√°c chu·ªói v√† validator
sc = SourceChain("chainA")
dc = DestinationChain("chainB")
validators = [ValidatorNode(f"v{i}") for i in range(4)]
rc = RelayChain(validators)

# Prover gi·ªØa SC v√† RC
sc_to_rc = SCtoRCProver(sc, rc)

# G·ª≠i giao d·ªãch t·ª´ SC ‚Üí RC
tx_id = "tx_001"
receiver = "chainB"
result = sc_to_rc.send_transaction({"message": "Send 100 MAP"}, receiver, tx_id)

if result["accepted"]:
    # Prover gi·ªØa RC v√† DC
    rc.generate_block()
    rc_to_dc = RCtoDCProver(rc, dc)
    rc_to_dc.send_to_destination( {"message": "Send 100 MAP"}, result["tx_hash"], tx_id)

# ƒê√≥ng block ·ªü DestinationChain
dc.generate_block()

# In k·∫øt qu·∫£
print("\nüîó SourceChain block:", sc.get_latest_block())
print("üîÅ RelayChain block:", rc.get_latest_block())
print("‚úÖ DestinationChain block:", dc.get_latest_block())
