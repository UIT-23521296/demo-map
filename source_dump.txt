# ==================================================
# Path: E:\Dai Hoc\NCKH\demo-map
# Detected tech: python
# ==================================================

## DIRECTORY STRUCTURE
```
demo-map/
├── .git/
├── __pycache__/
├── blockchains/
│   ├── __pycache__/
│   ├── destination_chain.py
│   └── source_chain.py
├── lightclient/
│   ├── __pycache__/
│   ├── light_client_rc.py
│   └── light_client_sc.py
├── prover/
│   ├── prover_rc_to_dc.py
│   └── prover_sc_to_rc.py
├── relay_chain/
│   ├── __pycache__/
│   ├── consensus.py
│   ├── relay_chain.py
│   └── validator.py
├── server/
│   ├── dc_server.py
│   ├── rc_server.py
│   └── sc_server.py
├── README.md
├── client_demo.py
├── run_server.py
├── source_dump.txt
└── zk_simulator.py
```

## FILE CONTENTS

### client_demo.py
```py
import requests, json, time
from zk_simulator import hash_data

tx_id   = "tx_001"
payload = {"msg": "Send 100 MAP"}
reiceiver = "chainB"

# 1. SC
r = requests.post("http://localhost:5001/send_tx",
                  json={"tx_id": tx_id, "receiver": reiceiver, "payload": payload}).json()
tx  = r["tx"]; print("SC block:", r["block"]["height"])
block = r["block"]

# 2. Lấy proof
pr = requests.post("http://localhost:5004/get_proof", json={"tx":tx, "merkle_root": block["merkle_root"]}).json()

# 3. Hỏi prover SC→RC để lấy zk_proof, tx_hash
# pv = requests.post("http://localhost:5004/prove",
#                    json={"tx_id":tx_id, "merkle_root":pr["merkle_root"]}).json()

# 3. Push lên RC
rc_res = requests.post("http://localhost:5002/relay_tx", json={
    "tx"           : tx,
    "tx_hash"      : hash_data(tx_id),
    "tx_hash_mkl"  : hash_data(tx),
    "proof"        : pr["proof"],
    "zk_proof"     : pr["zk_proof"]
}).json()
print("RC accept?", rc_res["accepted"])

# 5. RC đóng block
res = requests.get("http://localhost:5002/get_block")
data = res.json()
tx = data["tx"][0]
block = data["block"]

pr_rc_dc = requests.post("http://localhost:5005/get_proof", json={"tx":tx, "merkle_root": block["merkle_root"]}).json()

# 6. Gửi ctx sang DC
rc_res = requests.post("http://localhost:5003/receive_ctx", json={
    "tx"           : tx,
    "tx_hash_id"      : hash_data(tx_id),
    "tx_hash"  : hash_data(tx),
    "proof"        : pr_rc_dc["proof"],
    "merkle_root"  : pr_rc_dc["merkle_root"],
    "zk_proof"     : pr_rc_dc["zk_proof"]
}).json()
print("DC accept?", rc_res["accepted"])

# 7. DC seal
blk = requests.get("http://localhost:5003/get_block").json()
print("DC block:", json.dumps(blk, indent=2))

```

### run_server.py
```py
import subprocess

commands = [
    ["py", "-3.9", "server/sc_server.py"],
    ["py", "-3.9", "server/rc_server.py"],
    ["py", "-3.9", "server/dc_server.py"],
    ["py", "-3.9", "prover/prover_sc_to_rc.py"],
    ["py", "-3.9", "prover/prover_rc_to_dc.py"],
]

procs = [subprocess.Popen(cmd) for cmd in commands]

try:
    for p in procs:
        p.wait()
except KeyboardInterrupt:
    for p in procs:
        p.terminate()

```

### zk_simulator.py
```py
import hashlib

def hash_data(data: str) -> str:
    return hashlib.sha256(data.encode()).hexdigest()

def generate_zk_proof(tx_id: str, merkle_root: str) -> str:
    """
    Prover tạo zk proof từ dữ liệu bí mật (tx_id) và public (merkle root)
    """
    tx_hash = hash_data(tx_id)
    return hash_data(tx_hash + merkle_root)

def verify_zk_proof(proof: str, tx_hash: str, merkle_root: str) -> bool:
    """
    Verifier không biết tx_id, chỉ biết hash(tx_id), và merkle_root.
    """
    expected = hash_data(tx_hash + merkle_root)
    return proof == expected

```

### blockchains\destination_chain.py
```py
from blockchains.source_chain import SourceChain
from zk_simulator import verify_zk_proof
from merkletools import MerkleTools

class DestinationChain(SourceChain):
    def __init__(self, chain_id):
        super().__init__(chain_id)
        self.mt = MerkleTools(hash_type="sha256")

    def receive_ctx(self, tx, tx_hash_id: str, tx_hash: str, merkle_root_rc: str, proof_merkle: list, proof_zk: str) -> bool:
        """
        Nhận giao dịch đã relay từ RC, xác minh:
        1. tx_hash nằm trong Merkle tree của RC (proof_merkle)
        2. proof_zk hợp lệ với (tx_hash, merkle_root_rc)
        Nếu cả 2 đúng, thêm vào pending_tx để ghi block.
        """
        self.mt.reset_tree()

        # Bước 1: xác minh Merkle proof
        is_merkle_valid = self.mt.validate_proof(proof_merkle, tx_hash, merkle_root_rc)
        
        if not is_merkle_valid:
            print("❌ Merkle proof invalid")
            return False

        # Bước 2: xác minh zk giả lập
        is_zk_valid = verify_zk_proof(proof_zk, tx_hash_id, merkle_root_rc)

        if not is_zk_valid:
            print("❌ zk proof invalid")
            return False

        self.pending_tx.append(tx)
        return True

```

### blockchains\source_chain.py
```py
import hashlib
import json
from typing import List, Dict
from merkletools import MerkleTools

class SourceChain:
    def __init__(self, chain_id: str):
        self.chain_id = chain_id
        self.chain: List[Dict] = []
        self.pending_tx: List[str] = []
        self.block_height = 0
        self.mt = MerkleTools(hash_type="sha256")

    def add_transaction(self, payload: Dict, tx_receiver: str, tx_id: str) -> str:
        tx = {
            "tx_id": tx_id,
            "chain_id": self.chain_id,
            "receiver": tx_receiver,
            "payload": payload
        }
        tx_str = json.dumps(tx, sort_keys=True)
        self.pending_tx.append(tx_str)
        return tx_str

    def _calculate_merkle_root(self, txs: List[str]) -> str:
        self.mt.reset_tree()
        for tx in txs:
            self.mt.add_leaf(tx, do_hash=True)
        self.mt.make_tree()
        return self.mt.get_merkle_root()

    def generate_block(self):
        if not self.pending_tx:
            return None

        root = self._calculate_merkle_root(self.pending_tx)
        block = {
            "height": self.block_height,
            "merkle_root": root,
            "transactions": self.pending_tx.copy()
        }
        self.chain.append(block)
        self.block_height += 1
        self.pending_tx.clear()
        return block

    def get_latest_block(self):
        return self.chain[-1] if self.chain else None

    def get_merkle_proof(self, tx: str):
        block = self.get_latest_block()
        if not block:
            return None

        self.mt.reset_tree()
        for t in block["transactions"]:
            self.mt.add_leaf(t, do_hash=True)
        self.mt.make_tree()

        try:
            index = block["transactions"].index(tx)
        except ValueError:
            return None

        return self.mt.get_proof(index)

    def get_merkle_root(self):
        block = self.get_latest_block()
        return block["merkle_root"] if block else None

    def get_block_header(self):
        block = self.get_latest_block()
        if block:
            return {
                "height": block["height"],
                "merkle_root": block["merkle_root"]
            }
        return None
```

### lightclient\light_client_rc.py
```py
# light_client_sc.py  (chạy bên trong RC)
from merkletools import MerkleTools
import json
from zk_simulator import verify_zk_proof, hash_data

class LightClientRC:
    """
    Light-client đồng bộ & xác minh block SC (chainA) ở phía RC.
    """
    def __init__(self):
        self.finalized_header = None          # lưu header mới nhất
        self.merkle_root      = None          # r_mkl của header
        # tuỳ thiết kế bạn thêm validator_set, epoch, v.v.

    # ---------- phase “sync header” ----------
    def update_header(self, header: dict):
        """
        header = {height, merkle_root, ...}   (giả lập header tối giản)
        """
        # ở bản đầy đủ bạn sẽ verify chữ ký + BFT threshold trước khi chấp nhận
        if (self.finalized_header is None) or (header["height"] > self.finalized_header["height"]):
            self.finalized_header = header
            self.merkle_root      = header["merkle_root"]
            return True
        return False

    # ---------- phase “verify proof” ----------
    def verify_tx(self, ctx: str, merkle_proof: list, zk_proof: str) -> bool:
        """
        ctx  : chuỗi tx (đã JSON.dumps)
        merkle_proof : proof kèm theo
        zk_proof     : proof giả lập
        """
        if self.finalized_header is None:
            return False                      # chưa sync header

        mt = MerkleTools(hash_type="sha256")
        tx_hash_mkl = hash_data(ctx)


        # Verify merkle proof
        mkl_ok = mt.validate_proof(
            merkle_proof,
            tx_hash_mkl,
            self.merkle_root
        )

        # tx_id nằm trong payload ⇒ lôi ra để tạo tx_hash_id
        tx_id        = json.loads(ctx)["tx_id"]
        tx_hash_id   = hash_data(tx_id)

        # Verify zk proof
        zk_ok        = verify_zk_proof(zk_proof, tx_hash_id, self.merkle_root)

        return mkl_ok and zk_ok

```

### lightclient\light_client_sc.py
```py
# light_client_sc.py  (chạy bên trong RC)
from merkletools import MerkleTools
import json
from zk_simulator import verify_zk_proof, hash_data

class LightClientSC:
    """
    Light-client đồng bộ & xác minh block SC (chainA) ở phía RC.
    """
    def __init__(self):
        self.finalized_header = None          # lưu header mới nhất
        self.merkle_root      = None          # r_mkl của header
        # tuỳ thiết kế bạn thêm validator_set, epoch, v.v.

    # ---------- phase “sync header” ----------
    def update_header(self, header: dict):
        """
        header = {height, merkle_root, ...}   (giả lập header tối giản)
        """
        # ở bản đầy đủ bạn sẽ verify chữ ký + BFT threshold trước khi chấp nhận
        if (self.finalized_header is None) or (header["height"] > self.finalized_header["height"]):
            self.finalized_header = header
            self.merkle_root      = header["merkle_root"]
            return True
        return False

    # ---------- phase “verify proof” ----------
    def verify_tx(self, ctx: str, merkle_proof: list, zk_proof: str) -> bool:
        """
        ctx  : chuỗi tx (đã JSON.dumps)
        merkle_proof : proof kèm theo
        zk_proof     : proof giả lập
        """
        if self.finalized_header is None:
            return False                      # chưa sync header

        mt = MerkleTools(hash_type="sha256")
        tx_hash_mkl = hash_data(ctx)

        mkl_ok = mt.validate_proof(
            merkle_proof,
            tx_hash_mkl,
            self.merkle_root
        )

        # tx_id nằm trong payload ⇒ lôi ra để tạo tx_hash_id
        tx_id        = json.loads(ctx)["tx_id"]
        tx_hash_id   = hash_data(tx_id)
        zk_ok        = verify_zk_proof(zk_proof, tx_hash_id, self.merkle_root)

        return mkl_ok and zk_ok

```

### prover\prover_rc_to_dc.py
```py
# prover_rc_dc.py
import sys, os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from flask import Flask, request, jsonify
import requests
import json
from zk_simulator import generate_zk_proof, hash_data

app = Flask(__name__)

RC_URL = "http://localhost:5002"

# ---- API: lấy Merkle-proof thông qua SC-server -------
@app.route("/get_proof", methods=["POST"])
def get_proof():
    tx          = request.json["tx"]           # string transaction
    # Gọi SC-server để lấy proof + root
    resp = requests.post(f"{RC_URL}/get_proof", json={"tx": tx}, timeout=2)
    rc_data = resp.json()                      # {"proof": [...], "merkle_root": "...."}

    # zk_proof 
    tx_dict = json.loads(tx)         # ✅ chuyển string → dict
    tx_id   = tx_dict["tx_id"]       # ✅ lấy tx_id từ dict
    zk_proof    = generate_zk_proof(tx_id, rc_data["merkle_root"])

    return jsonify({
        "proof"      : rc_data["proof"],
        "merkle_root": rc_data["merkle_root"],
        "zk_proof"   : zk_proof,
        "tx"         : tx
    })

if __name__ == "__main__":
    app.run(port=5005)

```

### prover\prover_sc_to_rc.py
```py
# prover_sc_rc.py
import sys, os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from flask import Flask, request, jsonify
import json
import requests
from zk_simulator import generate_zk_proof, hash_data

app = Flask(__name__)


SC_URL = "http://localhost:5001" # địa chỉ Source-Chain server

# ---- API: lấy Merkle-proof thông qua SC-server -------
@app.route("/get_proof", methods=["POST"])
def get_proof():
    tx          = request.json["tx"]           # string transaction
    # Gọi SC-server để lấy proof + root
    resp = requests.post(f"{SC_URL}/get_proof", json={"tx": tx}, timeout=2)
    sc_data = resp.json()                      # {"proof": [...], "merkle_root": "...."}

    # Kèm thêm zk_proof (tuỳ bạn có cần hay không)
    tx_dict = json.loads(tx)         # ✅ chuyển string → dict
    tx_id   = tx_dict["tx_id"]       # ✅ lấy tx_id từ dict
    zk_proof    = generate_zk_proof(tx_id, sc_data["merkle_root"])

    return jsonify({
        "proof"      : sc_data["proof"],
        "merkle_root": sc_data["merkle_root"],
        "zk_proof"   : zk_proof,
        "tx"         : tx
    })

if __name__ == "__main__":
    app.run(port=5004)

```

### relay_chain\consensus.py
```py
from typing import List
from relay_chain.validator import ValidatorNode

class ConsensusEngine:
    def __init__(self, validators: List[ValidatorNode]):
        self.validators = validators
        self.quorum = (2 * len(validators)) // 3 + 1  # BFT: > 2/3 đồng thuận

    def commit_tx(self, tx: str, proof: list, merkle_root: str) -> bool:
        """
        Lấy phiếu từ tất cả validator. Nếu số validator đồng ý >= quorum, 
        thì giao dịch được chấp nhận.
        """
        votes = 0
        for validator in self.validators:
            if validator.vote(tx, proof, merkle_root):
                votes += 1
        print(f"✅ BFT votes: {votes}/{len(self.validators)}")
        return votes >= self.quorum

```

### relay_chain\relay_chain.py
```py
import json
from typing import List, Dict
from merkletools import MerkleTools
import hashlib
from relay_chain.validator import ValidatorNode
from relay_chain.consensus import ConsensusEngine
from zk_simulator import *
from merkletools import MerkleTools

class RelayChain:
    def __init__(self, validators: List[ValidatorNode]):
        self.chain: List[Dict] = []
        self.pending_tx: List[Dict] = []
        self.block_height = 0
        self.mt = MerkleTools(hash_type="sha256")
        self.consensus = ConsensusEngine(validators)

    def receive_tx(self, tx: str, tx_hash_formkl: str, proof: List[Dict], merkle_root: str) -> bool:
        # Step 1: verify Merkle proof
        # is_valid_proof = self.mt.validate_proof(proof, tx_hash_formkl, merkle_root)
        # if not is_valid_proof:
        #     print("❌ Merkle proof invalid")
        #     return False

        # # Step 2: verify zk proof
        # is_valid_zk = verify_zk_proof(zk_proof, tx_hash, merkle_root)
        # if not is_valid_zk:
        #     print("❌ zk proof invalid")
        #     return False

        # Step 3: BFT Consensus
        approved = self.consensus.commit_tx(tx_hash_formkl, proof, merkle_root)
        if approved:
            self.pending_tx.append(tx)
            return True
        print("❌ BFT Consensus invalid")
        return False

    def generate_block(self):
        if not self.pending_tx:
            return None

        self.mt.reset_tree()
        for tx in self.pending_tx:
            self.mt.add_leaf(tx, do_hash=True)
        self.mt.make_tree()

        block = {
            "height": self.block_height,
            "merkle_root": self.mt.get_merkle_root(),
            "transactions": self.pending_tx.copy()
        }
        self.chain.append(block)
        self.block_height += 1
        self.pending_tx.clear()
        return block

    def get_latest_block(self):
        return self.chain[-1] if self.chain else None

    def get_merkle_root(self):
        block = self.get_latest_block()
        return block["merkle_root"] if block else None
    
    def get_merkle_proof(self, tx: str):
        block = self.get_latest_block()
        if not block:
            return None

        self.mt.reset_tree()
        for t in block["transactions"]:
            self.mt.add_leaf(t, do_hash=True)
        self.mt.make_tree()

        try:
            index = block["transactions"].index(tx)
        except ValueError:
            return None

        return self.mt.get_proof(index)
```

### relay_chain\validator.py
```py
from merkletools import MerkleTools

class ValidatorNode:
    def __init__(self, node_id: str, is_honest: bool = True):
        self.node_id = node_id
        self.is_honest = is_honest
        self.mt = MerkleTools(hash_type="sha256")

    def vote(self, tx_hash: str, proof: list, merkle_root: str) -> bool:
        """
        Honest validator sẽ tự xác minh Merkle proof:
        - Nếu hợp lệ thì bỏ phiếu 'đồng ý'
        - Nếu không hoặc validator gian lận thì từ chối
        """
        if not self.is_honest:
            return False

        # Dùng MerkleTools để kiểm tra proof
        is_valid = self.mt.validate_proof(proof, tx_hash, merkle_root)
        return is_valid

```

### server\dc_server.py
```py
import sys, os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from flask import Flask, request, jsonify
from blockchains.destination_chain import DestinationChain
from lightclient.light_client_rc import LightClientRC

app = Flask(__name__)
dc = DestinationChain("chainB")

lc_rc = LightClientRC()

@app.route("/receive_ctx", methods=["POST"])
def receive_ctx():
    data = request.json
    result = dc.receive_ctx(
        tx=data["tx"],
        tx_hash_id=data["tx_hash_id"],
        tx_hash=data["tx_hash"],
        merkle_root_rc= lc_rc.merkle_root,
        proof_merkle=data["proof"],
        proof_zk=data["zk_proof"]
    )
    return jsonify({"accepted": result})

@app.route("/get_block", methods=["GET"])
def get_block():
    dc.generate_block()
    return jsonify(dc.get_latest_block())

@app.route("/sync_header", methods=["POST"])
def sync_header():
    header = request.json        # {height, merkle_root, ...}
    ok = lc_rc.update_header(header)
    return jsonify({"updated": ok})

if __name__ == "__main__":
    app.run(port=5003)

```

### server\rc_server.py
```py
import sys, os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from flask import Flask, request, jsonify
from relay_chain.relay_chain import RelayChain
from relay_chain.validator import ValidatorNode
from zk_simulator import verify_zk_proof
import requests
from lightclient.light_client_sc import LightClientSC

app = Flask(__name__)
validators = [ValidatorNode(f"v{i}") for i in range(4)]
rc = RelayChain(validators)

# @app.route("/relay_tx", methods=["POST"])
# def relay_tx():
#     data = request.json
#     result = rc.receive_tx(
#         tx=data["tx"],
#         tx_hash=data["tx_hash"],
#         tx_hash_formkl=data["tx_hash_for_mkl"],
#         proof=data["proof"],
#         merkle_root=data["merkle_root"],
#         zk_proof=data["zk_proof"]
#     )
#     return jsonify({"accepted": result})

@app.route("/get_block", methods=["GET"])
def get_block():
    block = rc.generate_block()

    # Đồng bộ rc LC
    header = {
        "height":      block["height"],
        "merkle_root": block["merkle_root"]
    }

    try:
        rc_res = requests.post("http://localhost:5003/sync_header", json=header, timeout=2).json()
        print("Sync header → DC:", rc_res)
    except Exception as e:
        print("⚠️  Không sync được header sang DC:", e)
    
    return jsonify({
        "tx": block["transactions"],
        "block": block
    })

# rc_server.py
lc_sc = LightClientSC()

@app.route("/sync_header", methods=["POST"])
def sync_header():
    header = request.json        # {height, merkle_root, ...}
    ok = lc_sc.update_header(header)
    return jsonify({"updated": ok})

@app.route("/relay_tx", methods=["POST"])
def relay_tx():
    d = request.json
    # 1. LC kiểm tra
    ok = lc_sc.verify_tx(
        ctx           = d["tx"],
        merkle_proof  = d["proof"],
        zk_proof      = d["zk_proof"]
    )
    if not ok:
        return jsonify({"accepted": False})

    # 2. chuyển qua lớp consensus của RC
    accepted = rc.receive_tx(
        tx              = d["tx"],
        tx_hash_formkl  = d["tx_hash_mkl"],
        proof           = d["proof"],
        merkle_root     = lc_sc.merkle_root,
    )
    return jsonify({"accepted": accepted})

@app.route("/get_proof", methods=["POST"])
def get_proof():
    tx = request.json.get("tx")
    proof = rc.get_merkle_proof(tx)
    root = rc.get_merkle_root()
    return jsonify({
        "proof": proof,
        "merkle_root": root
    })


if __name__ == "__main__":
    app.run(port=5002)

```

### server\sc_server.py
```py
import sys, os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from flask import Flask, request, jsonify
import requests      
from blockchains.source_chain import SourceChain

app = Flask(__name__)
sc = SourceChain("chainA")

@app.route("/send_tx", methods=["POST"])
def send_tx():
    payload = request.json.get("payload")
    receiver = request.json.get("receiver")
    tx_id = request.json.get("tx_id")

    # Tạo transaction và sinh block
    tx = sc.add_transaction(payload, receiver, tx_id)
    block = sc.generate_block()

    # Chuẩn bị header để sync LC
    header = {
        "height":      block["height"],
        "merkle_root": block["merkle_root"]
    }

    # Đồng bộ với LC
    try:
        rc_res = requests.post("http://localhost:5002/sync_header", json=header, timeout=2).json()
        print("Sync header → RC:", rc_res)
    except Exception as e:
        print("⚠️  Không sync được header sang RC:", e)
    
    return jsonify({
        "tx": tx,
        "block": block
    })

@app.route("/get_proof", methods=["POST"])
def get_proof():
    tx = request.json.get("tx")
    proof = sc.get_merkle_proof(tx)
    root = sc.get_merkle_root()
    return jsonify({
        "proof": proof,
        "merkle_root": root
    })

if __name__ == "__main__":
    app.run(port=5001)

```
